#!/usr/bin/env bash

# Get paths where source files are located. http://stackoverflow.com/a/42918
BINDIR="$(dirname "$(perl -MCwd -le 'print Cwd::abs_path(shift)' "${BASH_SOURCE[0]}")")"
STYLESDIR="$BINDIR/styles"

cred="$(echo -ne '\033[0;31m')"
ccyan="$(echo -ne '\033[0;36m')"
cnone="$(echo -ne '\033[0m')"

# bash unofficial strict mode
set -euo pipefail

stderr_in_red() {
  sed -e "s/\(.*\)/$cred\1$cnone/" >&2
}

usage() {
  if [ -n "$*" ]; then
    echo "$*" | stderr_in_red
    echo
  fi

  local STYLES
  STYLES="$(find "$STYLESDIR" -name '*.gv' -exec basename {} .gv \; | \
    tr '\n' ' ')"

  cat <<EOF
Git-aware madge.

Usage:
  git madge sorted [options] <madge option>...
  git madge dot    [options] <madge option>...  >  <filename>.dot
  git madge image  [options] <madge option>...  >  <filename>.png

Options:
  -b <branch>, --base <branch>  Limit madge to files changed by <branch>. If on
                                <branch>, operate on all files in the repo.
                                [default: master]
  -s <style>, --style <style>   Use <style> when generating a graphviz image.
                                Can be a preset or a path to a graphviz program
                                that styles the graph. Available presets:
                                $STYLES
                                [default: white]
  --dpi <dpi>                   Set the DPI of graphviz output to <dpi>.
  -h

Madge Options:
  Madge requires at least a path in which to find JavaScript files.
  You may also wish to configure things like webpack loaders.
EOF

  madge
  exit 1
}

# ----- option parsing --------------------------------------------------------

COMMAND=""
DPI=""
MADGE_ARGV=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    sorted|dot|image)
      COMMAND="$1"
      ;;
    -b|--base)
      REVIEW_BASE="$2"
      shift
      ;;
    -s|--style)
      STYLE="$2"
      shift
      ;;
    --dpi)
      DPI="$2"
      shift
      ;;
    -h)
      usage ""
      ;;
    *)
      MADGE_ARGV+=("$1")
      ;;
  esac
  shift
done

if [ -z "$COMMAND" ]; then
  usage "Must provide a subcommand (sorted, image, ...)"
fi

if [[ ${#MADGE_ARGV[@]} -eq 0 ]]; then
  usage "No madge options provided. madge requres at least a path."
fi

REVIEW_BASE=${REVIEW_BASE:-master}
STYLE=${STYLE:-white}

main() {
  case "$COMMAND" in
    sorted)
      sorted "${MADGE_ARGV[@]+"${MADGE_ARGV[@]}"}"
      ;;
    dot)
      dump_dot "${MADGE_ARGV[@]+"${MADGE_ARGV[@]}"}"
      ;;
    image)
      image "${MADGE_ARGV[@]+"${MADGE_ARGV[@]}"}"
      ;;
    *)
      usage "Unrecognized subcommand: $COMMAND"
      ;;
  esac
}


# ----- helpers ---------------------------------------------------------------

on_master() {
  [[ "$(git branch | grep '\*')" =~ $REVIEW_BASE ]]
}

git_files() {
  local merge_base
  merge_base="$(git merge-base HEAD "$REVIEW_BASE")"
  git diff --name-only "$merge_base"
}

# ----- commands --------------------------------------------------------------

# --- sorted ---

color_name() {
  # Only print color if output is a tty
  if [ -t 1 ]; then
    sed -e "s/\(..*\/\)*\(.[^|]*\)/\1$ccyan\2$cnone/"
  else
    cat -
  fi
}

list() {
  madge --json "$@" | \
    jq -r 'to_entries[] | .key as $key | .value[] | . + " " + $key' | \
    # Unix comes with a topological sort command. Isn't that nutty?
    tsort 2> >(stderr_in_red)
}

sorted() {
  # If on master, show all files in sorted order
  # Otherwise, filter to only files changed since master
  list "$@" | \
    if on_master; then cat -; else grep -xF -f <(git_files); fi | \
    color_name
}

# --- dot ---

repo_subgraph() {
  # Cache the list of files changed on this branch so we can
  # grep it multiple times (once per node) without recomputing.
  GIT_FILES="$(mktemp)"
  git_files > "$GIT_FILES"

  gvpr -i "N [system(sprintf(\"grep -q %s %s\", name, \"$GIT_FILES\")) == 0]"
}

dump_dot() {
  # If on master, include all files in DOT graph
  # Otherwise, use the subgraph induced by files changed since master
  madge --dot "$@" | \
    if on_master; then cat -; else repo_subgraph; fi
}

# --- image ---

as_png() {
  if [ -z "$DPI" ]; then
    dot -Tpng
  else
    dot -Tpng "-Gdpi=$DPI"
  fi
}

image() {
  case $STYLE in
    */*)
      # --style has a '/' in it, so its a path to a stylesheet, not a preset
      ;;
    *)
      STYLE="$STYLESDIR/$STYLE.gv"
      ;;
  esac
  [ ! -f "$STYLE" ] && usage "Unrecognized style: $STYLE."

  dump_dot "$@" | \
    (grep '.' || echo "Did any JavaScript files change on this branch?" | \
      stderr_in_red >&2) | \
    gvpr -c -f "$STYLE" | \
    as_png
}

main

